name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permite execução manual do pipeline

jobs:
  read-config:
    runs-on: ubuntu-latest
    outputs:
      destroy: ${{ steps.get-destroy-output.outputs.destroy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read config.yaml
        id: get-destroy-output
        run: |
          destroy=$(yq e '.destroy' config.yaml)
          echo "::set-output name=destroy::$destroy"

  build:
    runs-on: ubuntu-latest
    needs: read-config
    if: needs.read-config.outputs.destroy == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./app

      - name: Build with Gradle
        run: ./gradlew build
        working-directory: ./app

  test:
    runs-on: ubuntu-latest
    needs: build
    if: needs.read-config.outputs.destroy == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./app

      - name: Run tests with Gradle
        run: ./gradlew test
        working-directory: ./app

  provision-resource:
    runs-on: ubuntu-latest
    needs: test
    if: needs.read-config.outputs.destroy == 'false'
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./infra

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./infra

  deploy:
    runs-on: ubuntu-latest
    needs: provision-resource
    if: needs.read-config.outputs.destroy == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./app

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-spring-native-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image with the specific tag (using the commit SHA)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Push the image with the specific tag
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Tag the image as 'latest'
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Push the 'latest' tag
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        working-directory: ./app

      - name: Deploy to Amazon ECS
        env:
          AWS_REGION: us-east-1
          CLUSTER_NAME: my-ecs-cluster
          SERVICE_NAME: my-app-service
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region $AWS_REGION

  destroy-infra:
    runs-on: ubuntu-latest
    needs: read-config
    if: needs.read-config.outputs.destroy == 'true'
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./infra